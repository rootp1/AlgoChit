#pragma version 10

// This TEAL was generated by TEALScript v0.93.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64)void
*abi_route_createApplication:
	// totalMembersCount: uint64
	txna ApplicationArgs 3
	btoi

	// commissionPercent: uint64
	txna ApplicationArgs 2
	btoi

	// monthlyContrib: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(monthlyContrib: uint64, commissionPercent: uint64, totalMembersCount: uint64): void
createApplication:
	proto 3 0

	// src/ChitFundSimple.algo.ts:14
	// this.manager.value = this.txn.sender
	byte 0x6d616e61676572 // "manager"
	txn Sender
	app_global_put

	// src/ChitFundSimple.algo.ts:15
	// this.monthlyContribution.value = monthlyContrib
	byte 0x6d6f6e74686c79436f6e747269627574696f6e // "monthlyContribution"
	frame_dig -1 // monthlyContrib: uint64
	app_global_put

	// src/ChitFundSimple.algo.ts:16
	// this.managerCommissionPercent.value = commissionPercent
	byte 0x6d616e61676572436f6d6d697373696f6e50657263656e74 // "managerCommissionPercent"
	frame_dig -2 // commissionPercent: uint64
	app_global_put

	// src/ChitFundSimple.algo.ts:17
	// this.totalMembers.value = totalMembersCount
	byte 0x746f74616c4d656d62657273 // "totalMembers"
	frame_dig -3 // totalMembersCount: uint64
	app_global_put

	// src/ChitFundSimple.algo.ts:18
	// this.currentMonth.value = 0
	byte 0x63757272656e744d6f6e7468 // "currentMonth"
	int 0
	app_global_put

	// src/ChitFundSimple.algo.ts:19
	// this.chitValue.value = monthlyContrib * totalMembersCount
	byte 0x6368697456616c7565 // "chitValue"
	frame_dig -1 // monthlyContrib: uint64
	frame_dig -3 // totalMembersCount: uint64
	*
	app_global_put

	// src/ChitFundSimple.algo.ts:20
	// this.isActive.value = 0
	byte 0x6973416374697665 // "isActive"
	int 0
	app_global_put
	retsub

// startChit()void
*abi_route_startChit:
	// execute startChit()void
	callsub startChit
	int 1
	return

// startChit(): void
startChit:
	proto 0 0

	// src/ChitFundSimple.algo.ts:23
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// src/ChitFundSimple.algo.ts:24
	// assert(this.isActive.value === 0)
	byte 0x6973416374697665 // "isActive"
	app_global_get
	int 0
	==
	assert

	// src/ChitFundSimple.algo.ts:25
	// this.isActive.value = 1
	byte 0x6973416374697665 // "isActive"
	int 1
	app_global_put

	// src/ChitFundSimple.algo.ts:26
	// this.currentMonth.value = 1
	byte 0x63757272656e744d6f6e7468 // "currentMonth"
	int 1
	app_global_put
	retsub

// addMember(address)void
*abi_route_addMember:
	// memberAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (memberAddress) for addMember must be a address
	assert

	// execute addMember(address)void
	callsub addMember
	int 1
	return

// addMember(memberAddress: Address): void
addMember:
	proto 1 0

	// src/ChitFundSimple.algo.ts:30
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// src/ChitFundSimple.algo.ts:31
	// this.members(memberAddress).value = 1
	byte 0x6d // "m"
	frame_dig -1 // memberAddress: Address
	concat
	byte 0x0000000000000001
	box_put
	retsub

// removeMember(address)void
*abi_route_removeMember:
	// memberAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (memberAddress) for removeMember must be a address
	assert

	// execute removeMember(address)void
	callsub removeMember
	int 1
	return

// removeMember(memberAddress: Address): void
removeMember:
	proto 1 0

	// src/ChitFundSimple.algo.ts:35
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// src/ChitFundSimple.algo.ts:36
	// assert(this.isActive.value === 0)
	byte 0x6973416374697665 // "isActive"
	app_global_get
	int 0
	==
	assert

	// *if0_condition
	// src/ChitFundSimple.algo.ts:37
	// this.members(memberAddress).exists
	byte 0x6d // "m"
	frame_dig -1 // memberAddress: Address
	concat
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// src/ChitFundSimple.algo.ts:38
	// this.members(memberAddress).delete()
	byte 0x6d // "m"
	frame_dig -1 // memberAddress: Address
	concat
	box_del

*if0_end:
	// *if1_condition
	// src/ChitFundSimple.algo.ts:40
	// this.bids(memberAddress).exists
	byte 0x62 // "b"
	frame_dig -1 // memberAddress: Address
	concat
	box_len
	swap
	pop
	bz *if1_end

	// *if1_consequent
	// src/ChitFundSimple.algo.ts:41
	// this.bids(memberAddress).delete()
	byte 0x62 // "b"
	frame_dig -1 // memberAddress: Address
	concat
	box_del

*if1_end:
	retsub

// contribute()void
*abi_route_contribute:
	// execute contribute()void
	callsub contribute
	int 1
	return

// contribute(): void
contribute:
	proto 0 0

	// src/ChitFundSimple.algo.ts:46
	// assert(this.isActive.value === 1)
	byte 0x6973416374697665 // "isActive"
	app_global_get
	int 1
	==
	assert

	// src/ChitFundSimple.algo.ts:47
	// verifyPayTxn(this.txnGroup[this.txn.groupIndex - 1], {
	//       receiver: this.app.address,
	//       amount: this.monthlyContribution.value
	//     })
	txn GroupIndex
	int 1
	-
	store 248 // verifyTxn index

	// verify pay
	load 248 // verifyTxn index
	gtxns TypeEnum
	int pay
	==

	// transaction verification failed: {"txn":"this.txnGroup[this.txn.groupIndex - 1]","field":"typeEnum","expected":"pay"}
	assert

	// verify receiver
	load 248 // verifyTxn index
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"this.txnGroup[this.txn.groupIndex - 1]","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	load 248 // verifyTxn index
	gtxns Amount
	byte 0x6d6f6e74686c79436f6e747269627574696f6e // "monthlyContribution"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txnGroup[this.txn.groupIndex - 1]","field":"amount","expected":"this.monthlyContribution.value"}
	assert
	retsub

// submitBid(uint64)void
*abi_route_submitBid:
	// discountPercent: uint64
	txna ApplicationArgs 1
	btoi

	// execute submitBid(uint64)void
	callsub submitBid
	int 1
	return

// submitBid(discountPercent: uint64): void
submitBid:
	proto 1 0

	// src/ChitFundSimple.algo.ts:53
	// assert(this.isActive.value === 1)
	byte 0x6973416374697665 // "isActive"
	app_global_get
	int 1
	==
	assert

	// src/ChitFundSimple.algo.ts:54
	// assert(discountPercent <= 30)
	frame_dig -1 // discountPercent: uint64
	int 30
	<=
	assert

	// src/ChitFundSimple.algo.ts:55
	// this.bids(this.txn.sender).value = discountPercent
	byte 0x62 // "b"
	txn Sender
	concat
	frame_dig -1 // discountPercent: uint64
	itob
	box_put
	retsub

// distributePot(address,uint64,address[])void
*abi_route_distributePot:
	// memberAddresses: address[]
	txna ApplicationArgs 3
	extract 2 0

	// discountPercent: uint64
	txna ApplicationArgs 2
	btoi

	// winnerAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (winnerAddress) for distributePot must be a address
	assert

	// execute distributePot(address,uint64,address[])void
	callsub distributePot
	int 1
	return

// distributePot(winnerAddress: Address, discountPercent: uint64, memberAddresses: Address[]): void
distributePot:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// src/ChitFundSimple.algo.ts:62
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// src/ChitFundSimple.algo.ts:63
	// assert(this.isActive.value === 1)
	byte 0x6973416374697665 // "isActive"
	app_global_get
	int 1
	==
	assert

	// src/ChitFundSimple.algo.ts:65
	// discountAmount = this.chitValue.value * discountPercent / 100
	byte 0x6368697456616c7565 // "chitValue"
	app_global_get
	frame_dig -2 // discountPercent: uint64
	*
	int 100
	/
	frame_bury 0 // discountAmount: uint64

	// src/ChitFundSimple.algo.ts:66
	// potAfterDiscount = this.chitValue.value - discountAmount
	byte 0x6368697456616c7565 // "chitValue"
	app_global_get
	frame_dig 0 // discountAmount: uint64
	-
	frame_bury 1 // potAfterDiscount: uint64

	// src/ChitFundSimple.algo.ts:67
	// commission = discountAmount * this.managerCommissionPercent.value / 100
	frame_dig 0 // discountAmount: uint64
	byte 0x6d616e61676572436f6d6d697373696f6e50657263656e74 // "managerCommissionPercent"
	app_global_get
	*
	int 100
	/
	frame_bury 2 // commission: uint64

	// src/ChitFundSimple.algo.ts:68
	// remainingDiscount = discountAmount - commission
	frame_dig 0 // discountAmount: uint64
	frame_dig 2 // commission: uint64
	-
	frame_bury 3 // remainingDiscount: uint64

	// src/ChitFundSimple.algo.ts:70
	// sendPayment({
	//       receiver: winnerAddress,
	//       amount: potAfterDiscount
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/ChitFundSimple.algo.ts:71
	// receiver: winnerAddress
	frame_dig -1 // winnerAddress: Address
	itxn_field Receiver

	// src/ChitFundSimple.algo.ts:72
	// amount: potAfterDiscount
	frame_dig 1 // potAfterDiscount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if2_condition
	// src/ChitFundSimple.algo.ts:75
	// commission > 0
	frame_dig 2 // commission: uint64
	int 0
	>
	bz *if2_end

	// *if2_consequent
	// src/ChitFundSimple.algo.ts:76
	// sendPayment({
	//         receiver: this.manager.value,
	//         amount: commission
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/ChitFundSimple.algo.ts:77
	// receiver: this.manager.value
	byte 0x6d616e61676572 // "manager"
	app_global_get
	itxn_field Receiver

	// src/ChitFundSimple.algo.ts:78
	// amount: commission
	frame_dig 2 // commission: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// *if3_condition
	// src/ChitFundSimple.algo.ts:82
	// remainingDiscount > 0 && memberAddresses.length > 0
	frame_dig 3 // remainingDiscount: uint64
	int 0
	>
	dup
	bz *skip_and0
	frame_dig -3 // memberAddresses: Address[]
	len
	int 32
	/
	int 0
	>
	&&

*skip_and0:
	bz *if3_end

	// *if3_consequent
	// src/ChitFundSimple.algo.ts:83
	// nonWinnerCount: uint64 = 0
	int 0
	frame_bury 4 // nonWinnerCount: uint64

	// src/ChitFundSimple.algo.ts:84
	// for (let i = 0; i < memberAddresses.length; i = i + 1)
	int 0
	frame_bury 5 // i: uint64

*for_0:
	// src/ChitFundSimple.algo.ts:84
	// i < memberAddresses.length
	frame_dig 5 // i: uint64
	frame_dig -3 // memberAddresses: Address[]
	len
	int 32
	/
	<
	bz *for_0_end

	// *if4_condition
	// src/ChitFundSimple.algo.ts:85
	// memberAddresses[i] !== winnerAddress
	frame_dig -3 // memberAddresses: Address[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 5 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig -1 // winnerAddress: Address
	!=
	bz *if4_end

	// *if4_consequent
	// src/ChitFundSimple.algo.ts:86
	// nonWinnerCount = nonWinnerCount + 1
	frame_dig 4 // nonWinnerCount: uint64
	int 1
	+
	frame_bury 4 // nonWinnerCount: uint64

*if4_end:

*for_0_continue:
	// src/ChitFundSimple.algo.ts:84
	// i = i + 1
	frame_dig 5 // i: uint64
	int 1
	+
	frame_bury 5 // i: uint64
	b *for_0

*for_0_end:
	// *if5_condition
	// src/ChitFundSimple.algo.ts:90
	// nonWinnerCount > 0
	frame_dig 4 // nonWinnerCount: uint64
	int 0
	>
	bz *if5_end

	// *if5_consequent
	// src/ChitFundSimple.algo.ts:91
	// perMemberShare = remainingDiscount / nonWinnerCount
	frame_dig 3 // remainingDiscount: uint64
	frame_dig 4 // nonWinnerCount: uint64
	/
	frame_bury 6 // perMemberShare: uint64

	// src/ChitFundSimple.algo.ts:93
	// for (let i = 0; i < memberAddresses.length; i = i + 1)
	int 0
	frame_bury 7 // i: uint64

*for_1:
	// src/ChitFundSimple.algo.ts:93
	// i < memberAddresses.length
	frame_dig 7 // i: uint64
	frame_dig -3 // memberAddresses: Address[]
	len
	int 32
	/
	<
	bz *for_1_end

	// *if6_condition
	// src/ChitFundSimple.algo.ts:94
	// memberAddresses[i] !== winnerAddress
	frame_dig -3 // memberAddresses: Address[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 7 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig -1 // winnerAddress: Address
	!=
	bz *if6_end

	// *if6_consequent
	// src/ChitFundSimple.algo.ts:95
	// sendPayment({
	//               receiver: memberAddresses[i],
	//               amount: perMemberShare
	//             })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/ChitFundSimple.algo.ts:96
	// receiver: memberAddresses[i]
	frame_dig -3 // memberAddresses: Address[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 7 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	itxn_field Receiver

	// src/ChitFundSimple.algo.ts:97
	// amount: perMemberShare
	frame_dig 6 // perMemberShare: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if6_end:

*for_1_continue:
	// src/ChitFundSimple.algo.ts:93
	// i = i + 1
	frame_dig 7 // i: uint64
	int 1
	+
	frame_bury 7 // i: uint64
	b *for_1

*for_1_end:

*if5_end:

*if3_end:
	// src/ChitFundSimple.algo.ts:104
	// this.currentMonth.value = this.currentMonth.value + 1
	byte 0x63757272656e744d6f6e7468 // "currentMonth"
	dup
	app_global_get
	int 1
	+
	app_global_put

	// *if7_condition
	// src/ChitFundSimple.algo.ts:105
	// this.currentMonth.value > this.totalMembers.value
	byte 0x63757272656e744d6f6e7468 // "currentMonth"
	app_global_get
	byte 0x746f74616c4d656d62657273 // "totalMembers"
	app_global_get
	>
	bz *if7_end

	// *if7_consequent
	// src/ChitFundSimple.algo.ts:106
	// this.isActive.value = 0
	byte 0x6973416374697665 // "isActive"
	int 0
	app_global_put

*if7_end:
	retsub

// getCurrentMonth()uint64
*abi_route_getCurrentMonth:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getCurrentMonth()uint64
	callsub getCurrentMonth
	itob
	concat
	log
	int 1
	return

// getCurrentMonth(): uint64
getCurrentMonth:
	proto 0 1

	// src/ChitFundSimple.algo.ts:110
	// return this.currentMonth.value;
	byte 0x63757272656e744d6f6e7468 // "currentMonth"
	app_global_get
	retsub

// getChitStatus()uint64
*abi_route_getChitStatus:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getChitStatus()uint64
	callsub getChitStatus
	itob
	concat
	log
	int 1
	return

// getChitStatus(): uint64
getChitStatus:
	proto 0 1

	// src/ChitFundSimple.algo.ts:113
	// return this.isActive.value;
	byte 0x6973416374697665 // "isActive"
	app_global_get
	retsub

// pauseChit()void
*abi_route_pauseChit:
	// execute pauseChit()void
	callsub pauseChit
	int 1
	return

// pauseChit(): void
pauseChit:
	proto 0 0

	// src/ChitFundSimple.algo.ts:116
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// src/ChitFundSimple.algo.ts:117
	// this.isActive.value = 0
	byte 0x6973416374697665 // "isActive"
	int 0
	app_global_put
	retsub

// resumeChit()void
*abi_route_resumeChit:
	// execute resumeChit()void
	callsub resumeChit
	int 1
	return

// resumeChit(): void
resumeChit:
	proto 0 0

	// src/ChitFundSimple.algo.ts:120
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// src/ChitFundSimple.algo.ts:121
	// this.isActive.value = 1
	byte 0x6973416374697665 // "isActive"
	int 1
	app_global_put
	retsub

// updateTotalMembers(uint64)void
*abi_route_updateTotalMembers:
	// newTotal: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateTotalMembers(uint64)void
	callsub updateTotalMembers
	int 1
	return

// updateTotalMembers(newTotal: uint64): void
updateTotalMembers:
	proto 1 0

	// src/ChitFundSimple.algo.ts:124
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// src/ChitFundSimple.algo.ts:125
	// assert(newTotal > 0)
	frame_dig -1 // newTotal: uint64
	int 0
	>
	assert

	// src/ChitFundSimple.algo.ts:126
	// this.totalMembers.value = newTotal
	byte 0x746f74616c4d656d62657273 // "totalMembers"
	frame_dig -1 // newTotal: uint64
	app_global_put

	// src/ChitFundSimple.algo.ts:127
	// this.chitValue.value = this.monthlyContribution.value * newTotal
	byte 0x6368697456616c7565 // "chitValue"
	byte 0x6d6f6e74686c79436f6e747269627574696f6e // "monthlyContribution"
	app_global_get
	frame_dig -1 // newTotal: uint64
	*
	app_global_put
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "startChit()void"
	method "addMember(address)void"
	method "removeMember(address)void"
	method "contribute()void"
	method "submitBid(uint64)void"
	method "distributePot(address,uint64,address[])void"
	method "getCurrentMonth()uint64"
	method "getChitStatus()uint64"
	method "pauseChit()void"
	method "resumeChit()void"
	method "updateTotalMembers(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_startChit *abi_route_addMember *abi_route_removeMember *abi_route_contribute *abi_route_submitBid *abi_route_distributePot *abi_route_getCurrentMonth *abi_route_getChitStatus *abi_route_pauseChit *abi_route_resumeChit *abi_route_updateTotalMembers

	// this contract does not implement the given ABI method for call NoOp
	err