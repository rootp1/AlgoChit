{
  "hints": {
    "createApplication(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "addMember(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeMember(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "startChit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "contribute()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "submitBid(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "selectWinnerAndDistribute(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMemberDetails(address)(address,uint64,bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCurrentMonth()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getChitStatus()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pauseChit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "resumeChit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "monthlyContribution": {
          "type": "uint64",
          "key": "monthlyContribution"
        },
        "managerCommissionPercent": {
          "type": "uint64",
          "key": "managerCommissionPercent"
        },
        "totalMembers": {
          "type": "uint64",
          "key": "totalMembers"
        },
        "currentMonth": {
          "type": "uint64",
          "key": "currentMonth"
        },
        "chitValue": {
          "type": "uint64",
          "key": "chitValue"
        },
        "isActive": {
          "type": "bytes",
          "key": "isActive"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjkzLjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIHRvdGFsTWVtYmVyc0NvdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBjb21taXNzaW9uUGVyY2VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gbW9udGhseUNvbnRyaWI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24odWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24obW9udGhseUNvbnRyaWI6IHVpbnQ2NCwgY29tbWlzc2lvblBlcmNlbnQ6IHVpbnQ2NCwgdG90YWxNZW1iZXJzQ291bnQ6IHVpbnQ2NCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAzIDAKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoyOAoJLy8gdGhpcy5tYW5hZ2VyLnZhbHVlID0gdGhpcy50eG4uc2VuZGVyCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCgl0eG4gU2VuZGVyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjI5CgkvLyB0aGlzLm1vbnRobHlDb250cmlidXRpb24udmFsdWUgPSBtb250aGx5Q29udHJpYgoJYnl0ZSAweDZkNmY2ZTc0Njg2Yzc5NDM2ZjZlNzQ3MjY5NjI3NTc0Njk2ZjZlIC8vICJtb250aGx5Q29udHJpYnV0aW9uIgoJZnJhbWVfZGlnIC0xIC8vIG1vbnRobHlDb250cmliOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MzAKCS8vIHRoaXMubWFuYWdlckNvbW1pc3Npb25QZXJjZW50LnZhbHVlID0gY29tbWlzc2lvblBlcmNlbnQKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MjQzNmY2ZDZkNjk3MzczNjk2ZjZlNTA2NTcyNjM2NTZlNzQgLy8gIm1hbmFnZXJDb21taXNzaW9uUGVyY2VudCIKCWZyYW1lX2RpZyAtMiAvLyBjb21taXNzaW9uUGVyY2VudDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjMxCgkvLyB0aGlzLnRvdGFsTWVtYmVycy52YWx1ZSA9IHRvdGFsTWVtYmVyc0NvdW50CglieXRlIDB4NzQ2Zjc0NjE2YzRkNjU2ZDYyNjU3MjczIC8vICJ0b3RhbE1lbWJlcnMiCglmcmFtZV9kaWcgLTMgLy8gdG90YWxNZW1iZXJzQ291bnQ6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czozMgoJLy8gdGhpcy5jdXJyZW50TW9udGgudmFsdWUgPSAwCglieXRlIDB4NjM3NTcyNzI2NTZlNzQ0ZDZmNmU3NDY4IC8vICJjdXJyZW50TW9udGgiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czozMwoJLy8gdGhpcy5jaGl0VmFsdWUudmFsdWUgPSBtb250aGx5Q29udHJpYiAqIHRvdGFsTWVtYmVyc0NvdW50CglieXRlIDB4NjM2ODY5NzQ1NjYxNmM3NTY1IC8vICJjaGl0VmFsdWUiCglmcmFtZV9kaWcgLTEgLy8gbW9udGhseUNvbnRyaWI6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIHRvdGFsTWVtYmVyc0NvdW50OiB1aW50NjQKCSoKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MzQKCS8vIHRoaXMuaXNBY3RpdmUudmFsdWUgPSBmYWxzZQoJYnl0ZSAweDY5NzM0MTYzNzQ2OTc2NjUgLy8gImlzQWN0aXZlIgoJaW50IDAKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBhZGRNZW1iZXIoYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfYWRkTWVtYmVyOgoJLy8gbWVtYmVyQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChtZW1iZXJBZGRyZXNzKSBmb3IgYWRkTWVtYmVyIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGFkZE1lbWJlcihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgYWRkTWVtYmVyCglpbnQgMQoJcmV0dXJuCgovLyBhZGRNZW1iZXIobWVtYmVyQWRkcmVzczogQWRkcmVzcyk6IHZvaWQKYWRkTWVtYmVyOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czozNwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnT25seSBtYW5hZ2VyIGNhbiBhZGQgbWVtYmVycycpCgl0eG4gU2VuZGVyCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBPbmx5IG1hbmFnZXIgY2FuIGFkZCBtZW1iZXJzCglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czozOAoJLy8gYXNzZXJ0KCF0aGlzLmlzQWN0aXZlLnZhbHVlLCAnQ2Fubm90IGFkZCBtZW1iZXJzIGFmdGVyIGNoaXQgaGFzIHN0YXJ0ZWQnKQoJYnl0ZSAweDY5NzM0MTYzNzQ2OTc2NjUgLy8gImlzQWN0aXZlIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCSEKCgkvLyBDYW5ub3QgYWRkIG1lbWJlcnMgYWZ0ZXIgY2hpdCBoYXMgc3RhcnRlZAoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MzkKCS8vIG1lbWJlcjogTWVtYmVyID0gewoJLy8gICAgICAgYWRkcmVzczogbWVtYmVyQWRkcmVzcywKCS8vICAgICAgIGNvbnRyaWJ1dGVkOiAwLAoJLy8gICAgICAgaGFzUmVjZWl2ZWRQb3Q6IGZhbHNlLAoJLy8gICAgICAgbGFzdENvbnRyaWJ1dGlvbk1vbnRoOiAwCgkvLyAgICAgfQoJZnJhbWVfZGlnIC0xIC8vIG1lbWJlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWJ5dGUgMHgwMAoJaW50IDAKCWR1cAoJc2V0Yml0Cgljb25jYXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyBtZW1iZXI6IE1lbWJlcgoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjQ1CgkvLyB0aGlzLm1lbWJlcnMobWVtYmVyQWRkcmVzcykudmFsdWUgPSBtZW1iZXIKCWJ5dGUgMHg2ZCAvLyAibSIKCWZyYW1lX2RpZyAtMSAvLyBtZW1iZXJBZGRyZXNzOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIG1lbWJlcjogTWVtYmVyCglib3hfcHV0CglyZXRzdWIKCi8vIHJlbW92ZU1lbWJlcihhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9yZW1vdmVNZW1iZXI6CgkvLyBtZW1iZXJBZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKG1lbWJlckFkZHJlc3MpIGZvciByZW1vdmVNZW1iZXIgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgcmVtb3ZlTWVtYmVyKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiByZW1vdmVNZW1iZXIKCWludCAxCglyZXR1cm4KCi8vIHJlbW92ZU1lbWJlcihtZW1iZXJBZGRyZXNzOiBBZGRyZXNzKTogdm9pZApyZW1vdmVNZW1iZXI6Cglwcm90byAxIDAKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo0OQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnT25seSBtYW5hZ2VyIGNhbiByZW1vdmUgbWVtYmVycycpCgl0eG4gU2VuZGVyCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBPbmx5IG1hbmFnZXIgY2FuIHJlbW92ZSBtZW1iZXJzCglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo1MAoJLy8gYXNzZXJ0KCF0aGlzLmlzQWN0aXZlLnZhbHVlLCAnQ2Fubm90IHJlbW92ZSBtZW1iZXJzIGFmdGVyIGNoaXQgaGFzIHN0YXJ0ZWQnKQoJYnl0ZSAweDY5NzM0MTYzNzQ2OTc2NjUgLy8gImlzQWN0aXZlIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCSEKCgkvLyBDYW5ub3QgcmVtb3ZlIG1lbWJlcnMgYWZ0ZXIgY2hpdCBoYXMgc3RhcnRlZAoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6NTEKCS8vIGFzc2VydCh0aGlzLm1lbWJlcnMobWVtYmVyQWRkcmVzcykuZXhpc3RzLCAnTWVtYmVyIGRvZXMgbm90IGV4aXN0JykKCWJ5dGUgMHg2ZCAvLyAibSIKCWZyYW1lX2RpZyAtMSAvLyBtZW1iZXJBZGRyZXNzOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoKCS8vIE1lbWJlciBkb2VzIG5vdCBleGlzdAoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6NTIKCS8vIHRoaXMubWVtYmVycyhtZW1iZXJBZGRyZXNzKS5kZWxldGUoKQoJYnl0ZSAweDZkIC8vICJtIgoJZnJhbWVfZGlnIC0xIC8vIG1lbWJlckFkZHJlc3M6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2RlbAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo1MwoJLy8gdGhpcy5jdXJyZW50QmlkcyhtZW1iZXJBZGRyZXNzKS5leGlzdHMKCWJ5dGUgMHg2MiAvLyAiYiIKCWZyYW1lX2RpZyAtMSAvLyBtZW1iZXJBZGRyZXNzOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjU0CgkvLyB0aGlzLmN1cnJlbnRCaWRzKG1lbWJlckFkZHJlc3MpLmRlbGV0ZSgpCglieXRlIDB4NjIgLy8gImIiCglmcmFtZV9kaWcgLTEgLy8gbWVtYmVyQWRkcmVzczogQWRkcmVzcwoJY29uY2F0Cglib3hfZGVsCgoqaWYwX2VuZDoKCXJldHN1YgoKLy8gc3RhcnRDaGl0KCl2b2lkCiphYmlfcm91dGVfc3RhcnRDaGl0OgoJLy8gZXhlY3V0ZSBzdGFydENoaXQoKXZvaWQKCWNhbGxzdWIgc3RhcnRDaGl0CglpbnQgMQoJcmV0dXJuCgovLyBzdGFydENoaXQoKTogdm9pZApzdGFydENoaXQ6Cglwcm90byAwIDAKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo1OQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnT25seSBtYW5hZ2VyIGNhbiBzdGFydCBjaGl0JykKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgbWFuYWdlciBjYW4gc3RhcnQgY2hpdAoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6NjAKCS8vIGFzc2VydCghdGhpcy5pc0FjdGl2ZS52YWx1ZSwgJ0NoaXQgYWxyZWFkeSBhY3RpdmUnKQoJYnl0ZSAweDY5NzM0MTYzNzQ2OTc2NjUgLy8gImlzQWN0aXZlIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCSEKCgkvLyBDaGl0IGFscmVhZHkgYWN0aXZlCglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo2MQoJLy8gdGhpcy5pc0FjdGl2ZS52YWx1ZSA9IHRydWUKCWJ5dGUgMHg2OTczNDE2Mzc0Njk3NjY1IC8vICJpc0FjdGl2ZSIKCWludCAxCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo2MgoJLy8gdGhpcy5jdXJyZW50TW9udGgudmFsdWUgPSAxCglieXRlIDB4NjM3NTcyNzI2NTZlNzQ0ZDZmNmU3NDY4IC8vICJjdXJyZW50TW9udGgiCglpbnQgMQoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gY29udHJpYnV0ZSgpdm9pZAoqYWJpX3JvdXRlX2NvbnRyaWJ1dGU6CgkvLyBleGVjdXRlIGNvbnRyaWJ1dGUoKXZvaWQKCWNhbGxzdWIgY29udHJpYnV0ZQoJaW50IDEKCXJldHVybgoKLy8gY29udHJpYnV0ZSgpOiB2b2lkCmNvbnRyaWJ1dGU6Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjY1CgkvLyBhc3NlcnQodGhpcy5pc0FjdGl2ZS52YWx1ZSwgJ0NoaXQgZnVuZCBub3QgYWN0aXZlJykKCWJ5dGUgMHg2OTczNDE2Mzc0Njk3NjY1IC8vICJpc0FjdGl2ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMAoJZ2V0Yml0CgoJLy8gQ2hpdCBmdW5kIG5vdCBhY3RpdmUKCWFzc2VydAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjY2CgkvLyBtZW1iZXIgPSB0aGlzLm1lbWJlcnModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYnl0ZSAweDZkIC8vICJtIgoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gc3RvcmFnZSBrZXkvL21lbWJlcgoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjY3CgkvLyBhc3NlcnQobWVtYmVyLmFkZHJlc3MgPT09IHRoaXMudHhuLnNlbmRlciwgJ05vdCBhIHJlZ2lzdGVyZWQgbWVtYmVyJykKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCXR4biBTZW5kZXIKCT09CgoJLy8gTm90IGEgcmVnaXN0ZXJlZCBtZW1iZXIKCWFzc2VydAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjY4CgkvLyBhc3NlcnQobWVtYmVyLmxhc3RDb250cmlidXRpb25Nb250aCA8IHRoaXMuY3VycmVudE1vbnRoLnZhbHVlLCAnQWxyZWFkeSBjb250cmlidXRlZCB0aGlzIG1vbnRoJykKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDQxIDgKCWJ0b2kKCWJ5dGUgMHg2Mzc1NzI3MjY1NmU3NDRkNmY2ZTc0NjggLy8gImN1cnJlbnRNb250aCIKCWFwcF9nbG9iYWxfZ2V0Cgk8CgoJLy8gQWxyZWFkeSBjb250cmlidXRlZCB0aGlzIG1vbnRoCglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo2OQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy50eG4uc2VuZGVyLCAnSW52YWxpZCBzZW5kZXInKQoJdHhuIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyBJbnZhbGlkIHNlbmRlcgoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6NzAKCS8vIHZlcmlmeVBheVR4bih0aGlzLnR4bkdyb3VwW3RoaXMudHhuLmdyb3VwSW5kZXggLSAxXSwgewoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IHRoaXMubW9udGhseUNvbnRyaWJ1dGlvbi52YWx1ZQoJLy8gICAgIH0pCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCXN0b3JlIDI0OCAvLyB2ZXJpZnlUeG4gaW5kZXgKCgkvLyB2ZXJpZnkgcGF5Cglsb2FkIDI0OCAvLyB2ZXJpZnlUeG4gaW5kZXgKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG5Hcm91cFt0aGlzLnR4bi5ncm91cEluZGV4IC0gMV0iLCJmaWVsZCI6InR5cGVFbnVtIiwiZXhwZWN0ZWQiOiJwYXkifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglsb2FkIDI0OCAvLyB2ZXJpZnlUeG4gaW5kZXgKCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InRoaXMudHhuR3JvdXBbdGhpcy50eG4uZ3JvdXBJbmRleCAtIDFdIiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50Cglsb2FkIDI0OCAvLyB2ZXJpZnlUeG4gaW5kZXgKCWd0eG5zIEFtb3VudAoJYnl0ZSAweDZkNmY2ZTc0Njg2Yzc5NDM2ZjZlNzQ3MjY5NjI3NTc0Njk2ZjZlIC8vICJtb250aGx5Q29udHJpYnV0aW9uIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ0aGlzLnR4bkdyb3VwW3RoaXMudHhuLmdyb3VwSW5kZXggLSAxXSIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJ0aGlzLm1vbnRobHlDb250cmlidXRpb24udmFsdWUifQoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6NzQKCS8vIG1lbWJlci5jb250cmlidXRlZCA9IG1lbWJlci5jb250cmlidXRlZCArIHRoaXMubW9udGhseUNvbnRyaWJ1dGlvbi52YWx1ZQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAzMgoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMzIgOAoJYnRvaQoJYnl0ZSAweDZkNmY2ZTc0Njg2Yzc5NDM2ZjZlNzQ3MjY5NjI3NTc0Njk2ZjZlIC8vICJtb250aGx5Q29udHJpYnV0aW9uIgoJYXBwX2dsb2JhbF9nZXQKCSsKCWl0b2IKCXJlcGxhY2UzCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vbWVtYmVyCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjc1CgkvLyBtZW1iZXIubGFzdENvbnRyaWJ1dGlvbk1vbnRoID0gdGhpcy5jdXJyZW50TW9udGgudmFsdWUKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgNDEKCWJ5dGUgMHg2Mzc1NzI3MjY1NmU3NDRkNmY2ZTc0NjggLy8gImN1cnJlbnRNb250aCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglyZXBsYWNlMwoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL21lbWJlcgoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo3NgoJLy8gdGhpcy5tZW1iZXJzKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSBtZW1iZXIKCWJ5dGUgMHg2ZCAvLyAibSIKCXR4biBTZW5kZXIKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL21lbWJlcgoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5tZW1iZXJzKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWFzc2VydAoJYm94X3B1dAoJcmV0c3ViCgovLyBzdWJtaXRCaWQodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9zdWJtaXRCaWQ6CgkvLyBkaXNjb3VudFBlcmNlbnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc3VibWl0QmlkKHVpbnQ2NCl2b2lkCgljYWxsc3ViIHN1Ym1pdEJpZAoJaW50IDEKCXJldHVybgoKLy8gc3VibWl0QmlkKGRpc2NvdW50UGVyY2VudDogdWludDY0KTogdm9pZApzdWJtaXRCaWQ6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6NzkKCS8vIGFzc2VydCh0aGlzLmlzQWN0aXZlLnZhbHVlLCAnQ2hpdCBmdW5kIG5vdCBhY3RpdmUnKQoJYnl0ZSAweDY5NzM0MTYzNzQ2OTc2NjUgLy8gImlzQWN0aXZlIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCgkvLyBDaGl0IGZ1bmQgbm90IGFjdGl2ZQoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6ODAKCS8vIG1lbWJlciA9IHRoaXMubWVtYmVycyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlCglieXRlIDB4NmQgLy8gIm0iCgl0eG4gU2VuZGVyCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vbWVtYmVyCgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6ODEKCS8vIGFzc2VydChtZW1iZXIuYWRkcmVzcyA9PT0gdGhpcy50eG4uc2VuZGVyLCAnTm90IGEgcmVnaXN0ZXJlZCBtZW1iZXInKQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMCAzMgoJdHhuIFNlbmRlcgoJPT0KCgkvLyBOb3QgYSByZWdpc3RlcmVkIG1lbWJlcgoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6ODIKCS8vIGFzc2VydCghbWVtYmVyLmhhc1JlY2VpdmVkUG90LCAnQWxyZWFkeSByZWNlaXZlZCBwb3QnKQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAzMjAKCWdldGJpdAoJIQoKCS8vIEFscmVhZHkgcmVjZWl2ZWQgcG90Cglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo4MwoJLy8gYXNzZXJ0KG1lbWJlci5sYXN0Q29udHJpYnV0aW9uTW9udGggPT09IHRoaXMuY3VycmVudE1vbnRoLnZhbHVlLCAnTXVzdCBjb250cmlidXRlIGJlZm9yZSBiaWRkaW5nJykKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDQxIDgKCWJ0b2kKCWJ5dGUgMHg2Mzc1NzI3MjY1NmU3NDRkNmY2ZTc0NjggLy8gImN1cnJlbnRNb250aCIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE11c3QgY29udHJpYnV0ZSBiZWZvcmUgYmlkZGluZwoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6ODQKCS8vIGFzc2VydChkaXNjb3VudFBlcmNlbnQgPD0gMzAsICdEaXNjb3VudCBjYW5ub3QgZXhjZWVkIDMwJScpCglmcmFtZV9kaWcgLTEgLy8gZGlzY291bnRQZXJjZW50OiB1aW50NjQKCWludCAzMAoJPD0KCgkvLyBEaXNjb3VudCBjYW5ub3QgZXhjZWVkIDMwJQoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6ODUKCS8vIGJpZDogQmlkID0gewoJLy8gICAgICAgYmlkZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICBkaXNjb3VudFBlcmNlbnRhZ2U6IGRpc2NvdW50UGVyY2VudCwKCS8vICAgICAgIHRpbWVzdGFtcDogZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAKCS8vICAgICB9Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gZGlzY291bnRQZXJjZW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDEgLy8gYmlkOiBCaWQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo5MAoJLy8gdGhpcy5jdXJyZW50Qmlkcyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gYmlkCglieXRlIDB4NjIgLy8gImIiCgl0eG4gU2VuZGVyCgljb25jYXQKCWZyYW1lX2RpZyAxIC8vIGJpZDogQmlkCglib3hfcHV0CglyZXRzdWIKCi8vIHNlbGVjdFdpbm5lckFuZERpc3RyaWJ1dGUoYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfc2VsZWN0V2lubmVyQW5kRGlzdHJpYnV0ZToKCS8vIHdpbm5lckFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAod2lubmVyQWRkcmVzcykgZm9yIHNlbGVjdFdpbm5lckFuZERpc3RyaWJ1dGUgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgc2VsZWN0V2lubmVyQW5kRGlzdHJpYnV0ZShhZGRyZXNzKXZvaWQKCWNhbGxzdWIgc2VsZWN0V2lubmVyQW5kRGlzdHJpYnV0ZQoJaW50IDEKCXJldHVybgoKLy8gc2VsZWN0V2lubmVyQW5kRGlzdHJpYnV0ZSh3aW5uZXJBZGRyZXNzOiBBZGRyZXNzKTogdm9pZApzZWxlY3RXaW5uZXJBbmREaXN0cmlidXRlOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gNQoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjkzCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdPbmx5IG1hbmFnZXIgY2FuIHNlbGVjdCB3aW5uZXInKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSBtYW5hZ2VyIGNhbiBzZWxlY3Qgd2lubmVyCglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo5NAoJLy8gYXNzZXJ0KHRoaXMuaXNBY3RpdmUudmFsdWUsICdDaGl0IGZ1bmQgbm90IGFjdGl2ZScpCglieXRlIDB4Njk3MzQxNjM3NDY5NzY2NSAvLyAiaXNBY3RpdmUiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCWdldGJpdAoKCS8vIENoaXQgZnVuZCBub3QgYWN0aXZlCglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo5NQoJLy8gd2lubmVyID0gdGhpcy5tZW1iZXJzKHdpbm5lckFkZHJlc3MpLnZhbHVlCglieXRlIDB4NmQgLy8gIm0iCglmcmFtZV9kaWcgLTEgLy8gd2lubmVyQWRkcmVzczogQWRkcmVzcwoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gc3RvcmFnZSBrZXkvL3dpbm5lcgoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjk2CgkvLyBhc3NlcnQod2lubmVyLmFkZHJlc3MgPT09IHdpbm5lckFkZHJlc3MsICdJbnZhbGlkIHdpbm5lciBhZGRyZXNzJykKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMSAvLyB3aW5uZXJBZGRyZXNzOiBBZGRyZXNzCgk9PQoKCS8vIEludmFsaWQgd2lubmVyIGFkZHJlc3MKCWFzc2VydAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjk3CgkvLyBhc3NlcnQoIXdpbm5lci5oYXNSZWNlaXZlZFBvdCwgJ1dpbm5lciBhbHJlYWR5IHJlY2VpdmVkIHBvdCcpCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDMyMAoJZ2V0Yml0CgkhCgoJLy8gV2lubmVyIGFscmVhZHkgcmVjZWl2ZWQgcG90Cglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czo5OAoJLy8gd2lubmluZ0JpZCA9IHRoaXMuY3VycmVudEJpZHMod2lubmVyQWRkcmVzcykudmFsdWUKCWJ5dGUgMHg2MiAvLyAiYiIKCWZyYW1lX2RpZyAtMSAvLyB3aW5uZXJBZGRyZXNzOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2J1cnkgMSAvLyBzdG9yYWdlIGtleS8vd2lubmluZ0JpZAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjk5CgkvLyBhc3NlcnQod2lubmluZ0JpZC5iaWRkZXIgPT09IHdpbm5lckFkZHJlc3MsICdObyBiaWQgZnJvbSB3aW5uZXInKQoJaW50IDAKCWludCAzMgoJYnl0ZSAweDYyIC8vICJiIgoJZnJhbWVfZGlnIC0xIC8vIHdpbm5lckFkZHJlc3M6IEFkZHJlc3MKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWZyYW1lX2RpZyAtMSAvLyB3aW5uZXJBZGRyZXNzOiBBZGRyZXNzCgk9PQoKCS8vIE5vIGJpZCBmcm9tIHdpbm5lcgoJYXNzZXJ0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTAwCgkvLyBkaXNjb3VudEFtb3VudCA9IHRoaXMuY2hpdFZhbHVlLnZhbHVlICogd2lubmluZ0JpZC5kaXNjb3VudFBlcmNlbnRhZ2UgLyAxMDAKCWJ5dGUgMHg2MzY4Njk3NDU2NjE2Yzc1NjUgLy8gImNoaXRWYWx1ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMzIgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg2MiAvLyAiYiIKCWZyYW1lX2RpZyAtMSAvLyB3aW5uZXJBZGRyZXNzOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCgkqCglpbnQgMTAwCgkvCglmcmFtZV9idXJ5IDIgLy8gZGlzY291bnRBbW91bnQ6IHVpbnQ2NAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjEwMQoJLy8gcG90QWZ0ZXJEaXNjb3VudCA9IHRoaXMuY2hpdFZhbHVlLnZhbHVlIC0gZGlzY291bnRBbW91bnQKCWJ5dGUgMHg2MzY4Njk3NDU2NjE2Yzc1NjUgLy8gImNoaXRWYWx1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMiAvLyBkaXNjb3VudEFtb3VudDogdWludDY0CgktCglmcmFtZV9idXJ5IDMgLy8gcG90QWZ0ZXJEaXNjb3VudDogdWludDY0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTAyCgkvLyBjb21taXNzaW9uID0gZGlzY291bnRBbW91bnQgKiB0aGlzLm1hbmFnZXJDb21taXNzaW9uUGVyY2VudC52YWx1ZSAvIDEwMAoJZnJhbWVfZGlnIDIgLy8gZGlzY291bnRBbW91bnQ6IHVpbnQ2NAoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyNDM2ZjZkNmQ2OTczNzM2OTZmNmU1MDY1NzI2MzY1NmU3NCAvLyAibWFuYWdlckNvbW1pc3Npb25QZXJjZW50IgoJYXBwX2dsb2JhbF9nZXQKCSoKCWludCAxMDAKCS8KCWZyYW1lX2J1cnkgNCAvLyBjb21taXNzaW9uOiB1aW50NjQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoxMDMKCS8vIHJlbWFpbmluZ0Rpc2NvdW50ID0gZGlzY291bnRBbW91bnQgLSBjb21taXNzaW9uCglmcmFtZV9kaWcgMiAvLyBkaXNjb3VudEFtb3VudDogdWludDY0CglmcmFtZV9kaWcgNCAvLyBjb21taXNzaW9uOiB1aW50NjQKCS0KCWZyYW1lX2J1cnkgNSAvLyByZW1haW5pbmdEaXNjb3VudDogdWludDY0CgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTA0CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogd2lubmVyQWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogcG90QWZ0ZXJEaXNjb3VudAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTA1CgkvLyByZWNlaXZlcjogd2lubmVyQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHdpbm5lckFkZHJlc3M6IEFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoxMDYKCS8vIGFtb3VudDogcG90QWZ0ZXJEaXNjb3VudAoJZnJhbWVfZGlnIDMgLy8gcG90QWZ0ZXJEaXNjb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTA4CgkvLyBjb21taXNzaW9uID4gMAoJZnJhbWVfZGlnIDQgLy8gY29tbWlzc2lvbjogdWludDY0CglpbnQgMAoJPgoJYnogKmlmMV9lbmQKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjEwOQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICByZWNlaXZlcjogdGhpcy5tYW5hZ2VyLnZhbHVlLAoJLy8gICAgICAgICBhbW91bnQ6IGNvbW1pc3Npb24KCS8vICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTEwCgkvLyByZWNlaXZlcjogdGhpcy5tYW5hZ2VyLnZhbHVlCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjExMQoJLy8gYW1vdW50OiBjb21taXNzaW9uCglmcmFtZV9kaWcgNCAvLyBjb21taXNzaW9uOiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKKmlmMV9lbmQ6CgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoxMTQKCS8vIHdpbm5lci5oYXNSZWNlaXZlZFBvdCA9IHRydWUKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMzIwCglpbnQgMQoJc2V0Yml0CglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2lubmVyCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjExNQoJLy8gdGhpcy5tZW1iZXJzKHdpbm5lckFkZHJlc3MpLnZhbHVlID0gd2lubmVyCglieXRlIDB4NmQgLy8gIm0iCglmcmFtZV9kaWcgLTEgLy8gd2lubmVyQWRkcmVzczogQWRkcmVzcwoJY29uY2F0CglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2lubmVyCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1lbWJlcnMod2lubmVyQWRkcmVzcykudmFsdWUKCWFzc2VydAoJYm94X3B1dAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjExNgoJLy8gdGhpcy5jbGVhckJpZHMoKQoJY2FsbHN1YiBjbGVhckJpZHMKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoxMTcKCS8vIHRoaXMuY3VycmVudE1vbnRoLnZhbHVlID0gdGhpcy5jdXJyZW50TW9udGgudmFsdWUgKyAxCglieXRlIDB4NjM3NTcyNzI2NTZlNzQ0ZDZmNmU3NDY4IC8vICJjdXJyZW50TW9udGgiCglkdXAKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJKwoJYXBwX2dsb2JhbF9wdXQKCgkvLyAqaWYyX2NvbmRpdGlvbgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTE4CgkvLyB0aGlzLmN1cnJlbnRNb250aC52YWx1ZSA+IHRoaXMudG90YWxNZW1iZXJzLnZhbHVlCglieXRlIDB4NjM3NTcyNzI2NTZlNzQ0ZDZmNmU3NDY4IC8vICJjdXJyZW50TW9udGgiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZSAweDc0NmY3NDYxNmM0ZDY1NmQ2MjY1NzI3MyAvLyAidG90YWxNZW1iZXJzIgoJYXBwX2dsb2JhbF9nZXQKCT4KCWJ6ICppZjJfZW5kCgoJLy8gKmlmMl9jb25zZXF1ZW50CgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoxMTkKCS8vIHRoaXMuaXNBY3RpdmUudmFsdWUgPSBmYWxzZQoJYnl0ZSAweDY5NzM0MTYzNzQ2OTc2NjUgLy8gImlzQWN0aXZlIgoJaW50IDAKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoKKmlmMl9lbmQ6CglyZXRzdWIKCi8vIGNsZWFyQmlkcygpOiB2b2lkCmNsZWFyQmlkczoKCXByb3RvIDAgMAoJcmV0c3ViCgovLyBnZXRNZW1iZXJEZXRhaWxzKGFkZHJlc3MpKGFkZHJlc3MsdWludDY0LGJvb2wsdWludDY0KQoqYWJpX3JvdXRlX2dldE1lbWJlckRldGFpbHM6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIG1lbWJlckFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAobWVtYmVyQWRkcmVzcykgZm9yIGdldE1lbWJlckRldGFpbHMgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgZ2V0TWVtYmVyRGV0YWlscyhhZGRyZXNzKShhZGRyZXNzLHVpbnQ2NCxib29sLHVpbnQ2NCkKCWNhbGxzdWIgZ2V0TWVtYmVyRGV0YWlscwoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGdldE1lbWJlckRldGFpbHMobWVtYmVyQWRkcmVzczogQWRkcmVzcyk6IE1lbWJlcgpnZXRNZW1iZXJEZXRhaWxzOgoJcHJvdG8gMSAxCgoJLy8gc3JjL0NoaXRGdW5kLmFsZ28udHM6MTI0CgkvLyByZXR1cm4gdGhpcy5tZW1iZXJzKG1lbWJlckFkZHJlc3MpLnZhbHVlOwoJYnl0ZSAweDZkIC8vICJtIgoJZnJhbWVfZGlnIC0xIC8vIG1lbWJlckFkZHJlc3M6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5tZW1iZXJzKG1lbWJlckFkZHJlc3MpLnZhbHVlCglhc3NlcnQKCXJldHN1YgoKLy8gZ2V0Q3VycmVudE1vbnRoKCl1aW50NjQKKmFiaV9yb3V0ZV9nZXRDdXJyZW50TW9udGg6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0Q3VycmVudE1vbnRoKCl1aW50NjQKCWNhbGxzdWIgZ2V0Q3VycmVudE1vbnRoCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0Q3VycmVudE1vbnRoKCk6IHVpbnQ2NApnZXRDdXJyZW50TW9udGg6Cglwcm90byAwIDEKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoxMjcKCS8vIHJldHVybiB0aGlzLmN1cnJlbnRNb250aC52YWx1ZTsKCWJ5dGUgMHg2Mzc1NzI3MjY1NmU3NDRkNmY2ZTc0NjggLy8gImN1cnJlbnRNb250aCIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIGdldENoaXRTdGF0dXMoKWJvb2wKKmFiaV9yb3V0ZV9nZXRDaGl0U3RhdHVzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGdldENoaXRTdGF0dXMoKWJvb2wKCWNhbGxzdWIgZ2V0Q2hpdFN0YXR1cwoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXRDaGl0U3RhdHVzKCk6IGJvb2xlYW4KZ2V0Q2hpdFN0YXR1czoKCXByb3RvIDAgMQoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjEzMAoJLy8gcmV0dXJuIHRoaXMuaXNBY3RpdmUudmFsdWU7CglieXRlIDB4Njk3MzQxNjM3NDY5NzY2NSAvLyAiaXNBY3RpdmUiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCWdldGJpdAoJcmV0c3ViCgovLyBwYXVzZUNoaXQoKXZvaWQKKmFiaV9yb3V0ZV9wYXVzZUNoaXQ6CgkvLyBleGVjdXRlIHBhdXNlQ2hpdCgpdm9pZAoJY2FsbHN1YiBwYXVzZUNoaXQKCWludCAxCglyZXR1cm4KCi8vIHBhdXNlQ2hpdCgpOiB2b2lkCnBhdXNlQ2hpdDoKCXByb3RvIDAgMAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjEzMwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnT25seSBtYW5hZ2VyIGNhbiBwYXVzZScpCgl0eG4gU2VuZGVyCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBPbmx5IG1hbmFnZXIgY2FuIHBhdXNlCglhc3NlcnQKCgkvLyBzcmMvQ2hpdEZ1bmQuYWxnby50czoxMzQKCS8vIHRoaXMuaXNBY3RpdmUudmFsdWUgPSBmYWxzZQoJYnl0ZSAweDY5NzM0MTYzNzQ2OTc2NjUgLy8gImlzQWN0aXZlIgoJaW50IDAKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyByZXN1bWVDaGl0KCl2b2lkCiphYmlfcm91dGVfcmVzdW1lQ2hpdDoKCS8vIGV4ZWN1dGUgcmVzdW1lQ2hpdCgpdm9pZAoJY2FsbHN1YiByZXN1bWVDaGl0CglpbnQgMQoJcmV0dXJuCgovLyByZXN1bWVDaGl0KCk6IHZvaWQKcmVzdW1lQ2hpdDoKCXByb3RvIDAgMAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjEzNwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnT25seSBtYW5hZ2VyIGNhbiByZXN1bWUnKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSBtYW5hZ2VyIGNhbiByZXN1bWUKCWFzc2VydAoKCS8vIHNyYy9DaGl0RnVuZC5hbGdvLnRzOjEzOAoJLy8gdGhpcy5pc0FjdGl2ZS52YWx1ZSA9IHRydWUKCWJ5dGUgMHg2OTczNDE2Mzc0Njk3NjY1IC8vICJpc0FjdGl2ZSIKCWludCAxCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJbWV0aG9kICJhZGRNZW1iZXIoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJyZW1vdmVNZW1iZXIoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJzdGFydENoaXQoKXZvaWQiCgltZXRob2QgImNvbnRyaWJ1dGUoKXZvaWQiCgltZXRob2QgInN1Ym1pdEJpZCh1aW50NjQpdm9pZCIKCW1ldGhvZCAic2VsZWN0V2lubmVyQW5kRGlzdHJpYnV0ZShhZGRyZXNzKXZvaWQiCgltZXRob2QgImdldE1lbWJlckRldGFpbHMoYWRkcmVzcykoYWRkcmVzcyx1aW50NjQsYm9vbCx1aW50NjQpIgoJbWV0aG9kICJnZXRDdXJyZW50TW9udGgoKXVpbnQ2NCIKCW1ldGhvZCAiZ2V0Q2hpdFN0YXR1cygpYm9vbCIKCW1ldGhvZCAicGF1c2VDaGl0KCl2b2lkIgoJbWV0aG9kICJyZXN1bWVDaGl0KCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9hZGRNZW1iZXIgKmFiaV9yb3V0ZV9yZW1vdmVNZW1iZXIgKmFiaV9yb3V0ZV9zdGFydENoaXQgKmFiaV9yb3V0ZV9jb250cmlidXRlICphYmlfcm91dGVfc3VibWl0QmlkICphYmlfcm91dGVfc2VsZWN0V2lubmVyQW5kRGlzdHJpYnV0ZSAqYWJpX3JvdXRlX2dldE1lbWJlckRldGFpbHMgKmFiaV9yb3V0ZV9nZXRDdXJyZW50TW9udGggKmFiaV9yb3V0ZV9nZXRDaGl0U3RhdHVzICphYmlfcm91dGVfcGF1c2VDaGl0ICphYmlfcm91dGVfcmVzdW1lQ2hpdAoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ChitFundContract",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "monthlyContrib",
            "type": "uint64"
          },
          {
            "name": "commissionPercent",
            "type": "uint64"
          },
          {
            "name": "totalMembersCount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addMember",
        "args": [
          {
            "name": "memberAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeMember",
        "args": [
          {
            "name": "memberAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "startChit",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "contribute",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "submitBid",
        "args": [
          {
            "name": "discountPercent",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "selectWinnerAndDistribute",
        "args": [
          {
            "name": "winnerAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMemberDetails",
        "args": [
          {
            "name": "memberAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(address,uint64,bool,uint64)"
        }
      },
      {
        "name": "getCurrentMonth",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getChitStatus",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "pauseChit",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "resumeChit",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}